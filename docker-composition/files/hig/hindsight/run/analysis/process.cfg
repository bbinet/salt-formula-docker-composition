--[[
# Process message fields for rewriting and annotating

-- postprocess cfg should look like:
postprocess_cfg = {
  rewrite = {
    <measurement> = {  -- e.g. "trserver"
        <uuid> = {
        <rules>
        },
        ...
        defaults = {
        <rules>
        },
    },
    ...
    defaults = {
        <uuid> = {
            <rules>
        },
        ...
        defaults = {
            <rules>
        },
    }
  }
  annotate = {
    <uuid> = {
      _tag = value,
      .hidden = value
    },
    defaults = {
      <annotations>
    },
    notfound = {
      <annotations>
    }
  }
}

--]]

filename        = "process.lua"
message_matcher = "{{ cfg['message_matcher'] }}"
ticker_interval = {{ cfg.get('ticker_interval', 60) }}

-- Override of default sandbox configuration variables
{%- for key in ['output_limit', 'memory_limit', 'instruction_limit', 'preserve_data', 'restricted_headers', 'shutdown_on_terminate', 'thread', 'process_message_inject_limit', 'timer_event_inject_limit'] %}
{%- if key in cfg %}
{{ key }} = {{ cfg[key] }}
{%- endif %}
{%- endfor %}

postprocess_cfg = {
{%- if cfg.get('rewrite', False) %}
    rewrite = {
    {%- for mname, measurement in cfg['rewrite'].iteritems() %}
        ["{{ mname }}"] = {
        {%- for uuid, rules in measurement.iteritems() %}
            ["{{ uuid }}"] = {
            {%- for rule in rules %}
                {
                    pattern = "{{ rule['pattern'] }}",
                {%- if rule.get('delete', False) %}
                    delete = true,
                {%- else %}
                    {%- if rule.get('continue', False) %}
                    continue = true,
                    {%- endif %}
                    {%- if rule.get('scale', False) %}
                    scale = {{ rule['scale'] }},
                    {%- endif %}
                    replacement = "{{ rule['replacement'] }}",
                {%- endif %}
                },
            {%- endfor %}
            },
        {%- endfor %}
        },
    {%- endfor %}
    },
{%- endif %}

{%- if cfg.get('annotate', False) %}
    annotate = {
    {%- for uuid, annotations in cfg.get('annotate', {}).iteritems() %}
        ["{{ uuid }}"] = {
        {%- for k, v in annotations.iteritems() %}
            ["{{ k }}"] = "{{ v }}",
        {%- endfor %}
        },
    {%- endfor %}
    },
{%- endif %}
}
