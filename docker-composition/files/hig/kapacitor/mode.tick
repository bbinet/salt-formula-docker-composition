//mode

var cfg_period = {{ cfg.period }}
var cfg_every = {{ cfg.every }}
var cfg_goTo = {{ cfg.goTo }}
var cfg_day = {{ cfg.day }}
var cfg_night = {{ cfg.night }}
{%- if cfg.log is defined %}
var cfg_log = '{{ cfg.log }}'
{%- endif %}
var cfg_tracker = '{{ cfg.tracker }}'

batch

  |query('''SELECT "mode" AS "value" FROM "{{ db }}"."autogen"."trserver"''')
    .period(cfg_period)
    .every(cfg_every)

  |alert()
	.warn(lambda: "value"==cfg_goTo)
    .crit(lambda: "value"!=cfg_day AND "value"!=cfg_night AND "value"!=cfg_goTo)
    .message('')
    .id('mode')
    .idTag('id')
    .levelTag('level')
{%- if cfg.log is defined %}
    .log(cfg_log)
{%- endif %}

  |eval(lambda: if ("value"!=cfg_day AND "value"!=cfg_night AND "value"!=cfg_goTo, 3, 0), lambda: if("value"==cfg_goTo,1,0), lambda: "isCrit"+"isWarn", lambda: "value")
    .as('isCrit','isWarn','Ilevel','data')
    .keep('Ilevel','data')
    
  |where(lambda: "id" != '')
   
  |influxDBOut()
    .database('{{ db }}')
    .retentionPolicy('autogen')
    .measurement('alert')
    .tag('tracker', cfg_tracker)



