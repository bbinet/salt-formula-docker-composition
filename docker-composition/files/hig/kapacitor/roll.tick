//roll

var cfg_period = {{ cfg.period }}
var cfg_every = {{ cfg.every }}
var cfg_warn = {{ cfg.warn }}
var cfg_crit = {{ cfg.crit }}
var cfg_max_angle = {{ cfg.max_angle }}
var cfg_min_angle = {{ cfg.min_angle }}
{%- if cfg.log is defined %}
var cfg_log = '{{ cfg.log }}'
{%- endif %}
var cfg_tracker = '{{ cfg.tracker }}'

batch

  |query('''SELECT "sun_roll_angle"-"roll_angle" AS "value", "sun_roll_angle" AS "roll", "_sun" AS "sun", "mode" AS "mode" FROM "{{ db }}"."autogen"."trserver"''')
    .period(cfg_period)
    .every(cfg_every)
    
  |alert()
    .warn(lambda: ("value" > cfg_warn OR "value" < -cfg_warn) AND "roll" < cfg_max_angle AND "roll" > cfg_min_angle AND "sun" == '1' AND "mode"==5)
    .crit(lambda: ("value" > cfg_crit OR "value" < -cfg_crit) AND "roll" < cfg_max_angle AND "roll" > cfg_min_angle AND "sun" == '1' AND "mode"==5)
    .message('')
    .id('roll')
    .idTag('id')
    .levelTag('level')
    .durationField('duree')
{%- if cfg.log is defined %}
    .log(cfg_log)
{%- endif %}
    
  |eval(lambda: if (("value" > cfg_crit OR "value" < -cfg_crit) AND "roll" < cfg_max_angle AND "roll" > cfg_min_angle AND "sun" == '1' AND "mode"==5, 2, 0), lambda: if (("value" > cfg_warn OR "value" < -cfg_warn) AND "roll" < cfg_max_angle AND "roll" > cfg_min_angle AND "sun" == '1' AND "mode"==5, 1, 0), lambda: "isCrit"+"isWarn", lambda: "value", lambda: "duree"/1000000000)
    .as('isCrit','isWarn','Ilevel','data','duree')
    .keep('Ilevel','data','duree')
    
  |where(lambda: "id" != '') 
  
  |influxDBOut()
    .database('{{ db }}')
    .retentionPolicy('autogen')
    .measurement('alert')
    .tag('tracker', cfg_tracker)


